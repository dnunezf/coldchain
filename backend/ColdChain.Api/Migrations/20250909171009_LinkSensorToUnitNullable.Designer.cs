// <auto-generated />
using System;
using ColdChain.Api.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ColdChain.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250909171009_LinkSensorToUnitNullable")]
    partial class LinkSensorToUnitNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ColdChain.Api.Domain.Entities.Alert", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ClosedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("Metric")
                        .HasColumnType("int");

                    b.Property<DateTime>("OpenedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("RefrigerationUnitId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RefrigerationUnitId", "Status", "OpenedAtUtc");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("ColdChain.Api.Domain.Entities.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("ColdChain.Api.Domain.Entities.Reading", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("RecordedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("SensorId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(9,3)");

                    b.HasKey("Id");

                    b.HasIndex("SensorId", "RecordedAtUtc");

                    b.ToTable("Readings");
                });

            modelBuilder.Entity("ColdChain.Api.Domain.Entities.RefrigerationUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("RefrigerationUnits");
                });

            modelBuilder.Entity("ColdChain.Api.Domain.Entities.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<int?>("RefrigerationUnitId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("RefrigerationUnitId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("ColdChain.Api.Domain.Entities.Threshold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Max")
                        .HasColumnType("decimal(9,3)");

                    b.Property<int>("Metric")
                        .HasColumnType("int");

                    b.Property<decimal>("Min")
                        .HasColumnType("decimal(9,3)");

                    b.Property<int>("RefrigerationUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RefrigerationUnitId", "Metric")
                        .IsUnique();

                    b.ToTable("Thresholds");
                });

            modelBuilder.Entity("ColdChain.Api.Domain.Entities.Alert", b =>
                {
                    b.HasOne("ColdChain.Api.Domain.Entities.RefrigerationUnit", "RefrigerationUnit")
                        .WithMany()
                        .HasForeignKey("RefrigerationUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefrigerationUnit");
                });

            modelBuilder.Entity("ColdChain.Api.Domain.Entities.Reading", b =>
                {
                    b.HasOne("ColdChain.Api.Domain.Entities.Sensor", "Sensor")
                        .WithMany("Readings")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("ColdChain.Api.Domain.Entities.Sensor", b =>
                {
                    b.HasOne("ColdChain.Api.Domain.Entities.Device", "Device")
                        .WithMany("Sensors")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ColdChain.Api.Domain.Entities.RefrigerationUnit", "RefrigerationUnit")
                        .WithMany()
                        .HasForeignKey("RefrigerationUnitId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Device");

                    b.Navigation("RefrigerationUnit");
                });

            modelBuilder.Entity("ColdChain.Api.Domain.Entities.Threshold", b =>
                {
                    b.HasOne("ColdChain.Api.Domain.Entities.RefrigerationUnit", "RefrigerationUnit")
                        .WithMany()
                        .HasForeignKey("RefrigerationUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefrigerationUnit");
                });

            modelBuilder.Entity("ColdChain.Api.Domain.Entities.Device", b =>
                {
                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("ColdChain.Api.Domain.Entities.Sensor", b =>
                {
                    b.Navigation("Readings");
                });
#pragma warning restore 612, 618
        }
    }
}
